# -*- coding: utf-8 -*-
import GetSettingsModule
import PhotoModule
import datetime
import dateutil.parser
import json
import requests
import time
import urllib3
import vk
from captcha_solver import CaptchaSolver
from pytils import numeral

sdictionary = GetSettingsModule.GetSettings()
vk_token = sdictionary["vk_token"]
antigate_token = sdictionary["antigate_token"]

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
session = vk.Session(access_token=vk_token)
api = vk.API(session)
APIVersion = 5.73
bday_string = 'c –î–Ω—ë–º –†–æ–∂–¥–µ–Ω–∏—è!\n–£–¥–∞—á–∏ —Ç–µ–±–µ –≤–æ –≤—Å–µ–º, –∫–æ—Ç–∏–∫–æ–≤ –∏ –º–Ω–æ–≥–æ-–º–Ω–æ–≥–æ —Å–Ω–∞!\nüêç'
chat_users_all = {}
message_longpoll = [0]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ id –∫–æ–Ω—Ñ
conversations = {
    '1': '4',
    '2': '13',
    '3': '15',
    '4': '17',
    '5': '26',
    '6': '52',
    '7': '53',
    '8': '54',
}

# –ë–∞–∑–∞ –æ—Ç–≤–µ—Ç–æ–≤
base = {
    'üê±': '–ú—É—Ä :3',
    'üêç': 'üêçüêçüêç',
    '–ö—É—Å—å': '–∫—É—Å—å!!',
    '–∫—É—Å—å': '–∫—É—Å—å!!',
    '–ö–£–°–¨': '–∫—É—Å—å!!',
    '–ö—É—Å—å!': '–∫—É—Å—å!!1',
    '–∫—É—Å—å!': '–∫—É—Å—å!!1',
    '–î–æ–±—Ä–æ–µ': '–î–æ–±—Ä–æ–µ üê±',
    '–ñ—Ä–∞—Ç—å —Ö–æ—á—É': '–î–∏–∫—Ç—É–π –∞–¥—Ä–µ—Å, –∑–∞–∫–∞–∂–µ–º –ø–∏—Ü—Ü—É',
    '–≤—Å–µ —É—Ä–æ–¥—ã': '–°–æ–≥–ª–∞—Å–Ω–∞',
    '–í—Å–µ —É—Ä–æ–¥—ã': '–°–æ–≥–ª–∞—Å–Ω–∞!',
    '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ': '–î–æ–±—Ä–æ–µ)',
    '–û–ø–æ–∑–¥–∞—é': '–©–∏—Ç–æ –ø–æ–¥–µ–ª–∞—Ç—å –¥–µ—Å—É',
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–Ω–≥–ø—É–ª–∞
server = None
key = None
ts = None


def requests_image(file_url):
    img_data = requests.get(file_url, verify=False).content
    with open('captcha.jpg', 'wb') as handler:
        handler.write(img_data)


def get_key(d, value):
    for k, v in d.items():
        if v == value:
            return k


def check_dict(word):
    try:
        bike = base[word]
        return bike
    except:
        return 0


def print_(s):
    from pytils.third import six
    if six.PY3:
        out = s
    else:
        out = s.encode('UTF-8')
    return (out)


# –ü–æ–≥–æ–¥–∫–∞
def get_weather():
    def translate(word):

        super_translate = {

            "clear": "–Ø—Å–Ω–æ",
            "mostly-clear": "–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ",
            "partly-cloudy": "–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ",
            "overcast": "–ü–∞—Å–º—É—Ä–Ω–æ",
            "partly-cloudy-and-light-rain": "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å",
            "partly-cloudy-and-rain": "–î–æ–∂–¥—å",
            "overcast-and-rain": "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
            "overcast-thunderstorms-with-rain": "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å, –≥—Ä–æ–∑–∞",
            "cloudy": "–û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏",
            "cloudy-and-light-rain": "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å",
            "overcast-and-light-rain": "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å",
            "cloudy-and-rain": "–î–æ–∂–¥—å",
            "overcast-and-wet-snow": "–î–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º",
            "partly-cloudy-and-light-snow": "–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥",
            "partly-cloudy-and-snow": "–°–Ω–µ–≥",
            "overcast-and-snow": "–°–Ω–µ–≥–æ–ø–∞–¥",
            "cloudy-and-light-snow": "–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥",
            "overcast-and-light-snow": "–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥",
            "cloudy-and-snow": "–°–Ω–µ–≥",
            "full-moon": "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ",
            "decreasing-moon": "–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞",
            "last-quarter": "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å",
            "new-moon": "–ù–æ–≤–æ–ª—É–Ω–∏–µ",
            "growing-moon": "–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞",
            "first-quarter": "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å",

        }

        try:
            smysol = super_translate[word]
            return smysol
        except:
            return word

    headers = {
        # –•–µ–¥–µ—Ä—ã —Å –Ø.–ü–æ–≥–æ–¥–∫–∏
        'X-Yandex-Weather-Device-ID': 'AC02882D-1415-4B2C-91C9-9B2AF5579618',
        'X-Yandex-Weather-Token': '3916fd13d6ab74022f7b472e2c51b396',
        'X-Yandex-Weather-Device': 'os=iPhone OS; os_version=9.0.2; manufacturer=Apple; model=iPad; device_id=AC02882D-1415-4B2C-91C9-9B2AF5579618; uuid=8e58e9f0c6b30f82243f47856e23d98f"',
        'X-Yandex-Weather-Client': 'YandexWeatherIOS/2051',
        'X-Yandex-Weather-UUID': '8e58e9f0c6b30f82243f47856e23d98f',
        'X-Yandex-Weather-Timestamp': '1471287200'
    }

    my_json = requests.get('https://api.weather.yandex.ru/v1/forecast?ext_kind=weather&lang=ru_RU&geoid=213',
                           headers=headers).json()
    sunrise = my_json['forecasts'][0]['sunrise']
    sunset = my_json['forecasts'][0]['sunset']
    parts = my_json['forecasts'][0]['parts']
    city = my_json['geo_object']['province']['name']

    now = my_json['fact']
    temp = str(now['temp']) + '¬∞C'
    feels = str(now['feels_like']) + '¬∞C'
    wind_speed = str(now['wind_speed']) + ' –º/—Å'
    humidity = str(now['humidity']) + '%'
    pressure_mm = str(now['pressure_mm']) + ' –º–º —Ä—Ç. —Å—Ç.'
    morning = str(parts['morning']['temp_avg']) + '¬∞C'
    day = str(parts['day']['temp_avg']) + '¬∞C'
    evening = str(parts['evening']['temp_avg']) + '¬∞C'
    description = translate(now['condition'])
    formatting_parts = '\n–£—Ç—Ä–æ: ' + morning + '\n–î–µ–Ω—å: ' + day + '\n–í–µ—á–µ—Ä: ' + evening
    formatting_set = '\n–í–æ—Å—Ö–æ–¥: ' + sunrise + '\n–ó–∞–∫–∞—Ç: ' + sunset
    out = city + '\n' + description + '\n–°–µ–π—á–∞—Å: ' + temp + '\n–ü–æ –æ—â—É—â–µ–Ω–∏—è–º: ' + feels + '\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: ' + wind_speed + '\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: ' + humidity + '\n–î–∞–≤–ª–µ–Ω–∏–µ: ' + pressure_mm + '\n' + formatting_parts + '\n' + formatting_set

    return out


# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è —Å –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏–π
def get_bdate_chat():
    birthday_dictionary = {}

    for chat_id in range(len(conversations)):
        chat_user_arr = api.messages.getChat(chat_id=conversations[str(chat_id + 1)], fields='bdate', v=APIVersion)[
            'users']

        for i in range(len(chat_user_arr)):

            chat_users_all[chat_user_arr[i]['id']] = conversations[str(chat_id + 1)]
            try:
                buf = chat_user_arr[i]['bdate'].split('.')
                new_date = str(buf[0]) + '.' + str(buf[1])
                birthday_dictionary[chat_user_arr[i]['id']] = new_date
            except:
                birthday_dictionary[chat_user_arr[i]['id']] = 'NaN'

    return birthday_dictionary


birthday_all = get_bdate_chat()

# –°—á–µ—Ç—á–∏–∫ –æ—Ç 1 —Å–µ–Ω—Ç—è–±—Ä—è
a = '2019-06-01'.split('-')
aa = datetime.date(int(a[0]), int(a[1]), int(a[2]))

#–°—á—ë—Ç—á–∏–∫ –¥–æ –ø—Ä–∏–∫–∞–∑–∞ –≤ —Ñ–∏–Ω–∞—à–∫—É

fa_aa = '2019-08-03'.split('-')
fa_counter = datetime.date(int(fa_aa[0]), int(fa_aa[1]), int(fa_aa[2]))


while True:

    # –§–∏–∫—Å –ª–æ–Ω–ø—É–ª–∞ –ø–æ —Ö–∞—Ä–¥—É
    if server == None:
        cfg = api.messages.getLongPollServer(v=APIVersion)
        server = cfg['server']
        key = cfg['key']
        ts = cfg['ts']

    response = requests.post(
        "https://{server}?act=a_check&key={key}&ts={ts}&wait=25&mode={mode}&version=2".format(**{
            "server": server,
            "key": key,
            "ts": ts,
            "mode": 2
        }),
        timeout=30
    ).json()

    # –†–∞–±–æ—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º/–¥–∞—Ç–æ–π
    now_date = datetime.date.today()
    now_time = datetime.datetime.now()
    day = now_date.isoweekday()
    cur_hour = now_time.hour
    cur_minute = now_time.minute
    cur_second = now_time.second
    cur_month = now_date.month
    cur_day = now_date.day
    for_logs = str(now_time.hour) + ':' + str(now_time.minute) + ':' + str(now_time.second)
    bb = datetime.date.today()

    # –°—á–µ—Ç—á–∏–∫ –¥–Ω–µ–π –ª–µ—Ç–∞
    cc = bb - aa
    dd = int(str(cc).split()[0]) + 1

    fa_cc = fa_counter - bb
    fa_dd = int(str(fa_cc).split()[0]) + 1
    fa_days = print_(numeral.choose_plural(int(fa_dd), (u'–¥–µ–Ω—å', u'–¥–Ω—è', u'–¥–Ω–µ–π')))
    # left = print_(numeral.choose_plural(int(dd), (u'–û—Å—Ç–∞–ª—Å—è', u'–û—Å—Ç–∞–ª–æ—Å—å', u'–û—Å—Ç–∞–ª–æ—Å—å')))

    # –ù–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∏–∫–æ–≤
    chat_titles = {
        '1': 'IV –ö—É—Ä—Å | ' + str(dd) + ' –¥–µ–Ω—å –ª–µ—Ç–∞',
        '2': 'III –ö—É—Ä—Å | ' + str(dd) + ' –¥–µ–Ω—å –ª–µ—Ç–∞',
        '3': '3–ü–ö–°-117 | ' + str(dd) + ' –¥–µ–Ω—å –ª–µ—Ç–∞',
        '4': 'II –ö—É—Ä—Å | ' + str(dd) + ' –¥–µ–Ω—å –ª–µ—Ç–∞',
        '5': '4–ü–ö–°-116 | ' + str(dd) + ' –¥–µ–Ω—å –ª–µ—Ç–∞',
        '6': 'I –ö—É—Ä—Å | ' + str(dd) + ' –¥–µ–Ω—å –ª–µ—Ç–∞',
        '7': 'FA | –î–æ –ø—Ä–∏–∫–∞–∑–∞ ' + str(fa_dd) + ' '+fa_days,
        '8': '–ü–ú–ò–ò–¢ 2019 | ' + str(dd) + ' –¥–µ–Ω—å –ª–µ—Ç–∞',
    }

    # –ß–µ–∫–∞–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
    if cur_hour == 6 and cur_minute == 58:
        dstring = str(cur_day) + '.' + str(cur_month)
        bufkey = get_key(birthday_all, dstring)
        if bufkey != None:
            bday_user = api.users.get(user_ids=bufkey, name_case="acc", v=APIVersion)[0]
            msg = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º *id' + str(bufkey) + "(" + bday_user['first_name'] + ' ' + bday_user[
                'last_name'] + ') ' + bday_string
            api.messages.send(chat_id=chat_users_all[bufkey], message=msg, v=APIVersion)
        time.sleep(120)

    # –ß–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –±–µ—Å–µ–¥
    for i in range(len(conversations)):
        time.sleep(0.5)
        conf_id = conversations[str(i + 1)]
        name_now = api.messages.getChat(chat_id=conf_id, v=APIVersion)
        check = name_now['title']

        # –ï—Å–ª–∏ –Ω–∞–¥–æ, —Ç–æ –º–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        if check != chat_titles[str(i + 1)]:
            try:
                api.messages.editChat(chat_id=conf_id, title=chat_titles[str(i + 1)], v=APIVersion)
            except Exception as e:

                captcha_sid = vk.exceptions.VkAPIError.captcha_sid.__get__(e)
                captcha_url = vk.exceptions.VkAPIError.captcha_img.__get__(e)
                if (captcha_sid == None) and (captcha_url == None):
                    time.sleep(3)
                    api.messages.editChat(chat_id=conf_id, title=chat_titles[str(i + 1)], v=APIVersion)
                requests_image(captcha_url)
                solver = CaptchaSolver('antigate', api_key=antigate_token)
                raw_data = open('captcha.jpg', 'rb').read()
                captcha_ready = solver.solve_captcha(raw_data)
                api.messages.editChat(chat_id=conf_id, title=chat_titles[str(i + 1)], v=APIVersion,
                                      captcha_sid=captcha_sid, captcha_key=captcha_ready)
    checker = False

    for i in range(len(response['updates'])):
        if checker != True:
            try:
                message_longpoll = response['updates'][i][5]
                chat_longpoll = response['updates'][i][3] - 2000000000
                checker = True

            except:
                pass
            # –§–æ—Ç–æ—á–∫—É –∏—â–µ–º
            try:
                attaches = response['updates'][0][6]
            except:
                pass
    if checker == False:
        attaches = [0]
        message_longpoll = [0]
        chat_longpoll = [0]

    ts = response['ts']

    # –ß–µ–∫–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message_longpoll != [0]:

        if check_dict(message_longpoll) != 0:
            api.messages.send(chat_id=chat_longpoll, message=base[message_longpoll], v=APIVersion)

        elif message_longpoll == "/–ø–æ–≥–æ–¥–∞":
            mess = get_weather()
            api.messages.send(chat_id=chat_longpoll, message=mess, v=APIVersion)

        elif message_longpoll == "/—Ñ–æ—Ç–æ" and "attach1_type" in attaches:
            if attaches["attach1_type"] == "photo":
                api.messages.send(chat_id=chat_longpoll, message="–†–∞–±–æ—Ç–∞–µ–º üê±", v=APIVersion)
                photo_json = \
                    api.messages.getById(message_ids=response['updates'][0][1], v=APIVersion)["items"][0][
                        "attachments"][0][
                        "photo"]

                # –ü—Ä–æ—Å—Ç–∏—Ç–µ
                keyname = ""
                for key in photo_json:
                    if key[:5] == "photo":
                        keyname = key

                server_url = api.photos.getMessagesUploadServer(peer_id=chat_longpoll, v=APIVersion)["upload_url"]
                thisfilename = PhotoModule.getfile(photo_json[keyname])
                PhotoModule.DrawText(thisfilename, sdictionary["ttf_path"])
                photo_response = requests.post(server_url, files={'photo': open(thisfilename, 'rb')}).json()
                photo_final = \
                    api.photos.saveMessagesPhoto(photo=photo_response["photo"], server=photo_response["server"],
                                                 hash=photo_response["hash"], v=APIVersion)[0]
                photo_str = "photo" + str(photo_final["owner_id"]) + "_" + str(photo_final["id"])
                api.messages.send(chat_id=chat_longpoll, attachment=photo_str, v=APIVersion)
