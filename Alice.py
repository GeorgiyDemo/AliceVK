# -*- coding: utf-8 -*-
from pytils import numeral
import vk,random,time,datetime,os,json,requests,xlrd
session = vk.Session(access_token='token')
api = vk.API(session)
admin_id = '257350143'

#–ù–∞—Å—Ç—Ä–æ–π–∫–∞ id –∫–æ–Ω—Ñ
conversations= {
    '1':'11',
    '2':'3',
    '3':'4',
}
#–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–∫ –≤ –∫–æ–Ω—Ñ–∞—Ö
photoconf={
    '11':'./KIP/4.jpg',
    '3':'./KIP/2.jpg',
    '4':'./KIP/1.jpg',
}
#–ë–∞–∑–∞ –æ—Ç–≤–µ—Ç–æ–≤
base={
    'üê±':'–ú—É—Ä :3',
    '–î–æ–±—Ä–æ–µ':'–î–æ–±—Ä–æ–µ üê±',
    '–ñ—Ä–∞—Ç—å —Ö–æ—á—É':'–î–∏–∫—Ç—É–π –∞–¥—Ä–µ—Å',
    '–≤—Å–µ —É—Ä–æ–¥—ã':'–°–æ–≥–ª–∞—Å–Ω–∞',
    '–í—Å–µ —É—Ä–æ–¥—ã':'–°–æ–≥–ª–∞—Å–Ω–∞!',
    '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ':'–î–æ–±—Ä–æ–µ)',
}

#–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–Ω–≥–ø—É–ª–∞
longi = api.messages.getLongPollServer(use_ssl=0,need_pts=1)
ts = longi['ts']
pts = longi['pts']
wtf = longi['key']

def check_dict(word):
    try:
        bike = base[word]
        return bike
    except:
        return 0

def print_(s):
	from pytils.third import six
	if six.PY3:
		out = s
	else:
		out = s.encode('UTF-8')
	return(out)		

#–ü–æ–≥–æ–¥–∫–∞
def get_weather():

    def translate(word):

        super_translate ={

        "clear": "–Ø—Å–Ω–æ",
        "mostly-clear": "–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ",
        "partly-cloudy": "–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ",
        "overcast": "–ü–∞—Å–º—É—Ä–Ω–æ",
        "partly-cloudy-and-light-rain": "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å",
        "partly-cloudy-and-rain": "–î–æ–∂–¥—å",
        "overcast-and-rain": "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
        "overcast-thunderstorms-with-rain": "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å, –≥—Ä–æ–∑–∞",
        "cloudy": "–û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏",
        "cloudy-and-light-rain": "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å",
        "overcast-and-light-rain": "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å",
        "cloudy-and-rain": "–î–æ–∂–¥—å",
        "overcast-and-wet-snow": "–î–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º",
        "partly-cloudy-and-light-snow": "–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥",
        "partly-cloudy-and-snow": "–°–Ω–µ–≥",
        "overcast-and-snow": "–°–Ω–µ–≥–æ–ø–∞–¥",
        "cloudy-and-light-snow": "–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥",
        "overcast-and-light-snow": "–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥",
        "cloudy-and-snow": "–°–Ω–µ–≥",
        "full-moon": "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ",
        "decreasing-moon": "–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞",
        "last-quarter": "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å",
        "new-moon": "–ù–æ–≤–æ–ª—É–Ω–∏–µ",
        "growing-moon": "–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞",
        "first-quarter": "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å",
    
        }

        try:
            smysol = super_translate[word]
            return smysol
        except:
            return word

    headers = {
    #–•–µ–¥–µ—Ä—ã —Å –Ø.–ü–æ–≥–æ–¥–∫–∏
    'X-Yandex-Weather-Device-ID': 'Device-ID',
    'X-Yandex-Weather-Token': 'Token',
    'X-Yandex-Weather-Device': 'os=iPhone OS; os_version=9.0.2; manufacturer=Apple; model=iPad; device_id=Device-ID; uuid=uuid"',
    'X-Yandex-Weather-Client': 'YandexWeatherIOS/2051',
    'X-Yandex-Weather-UUID': 'UUID',
    'X-Yandex-Weather-Timestamp': '1471287200'
    }

    my_json = requests.get('https://api.weather.yandex.ru/v1/forecast?ext_kind=weather&lang=ru_RU&geoid=213',headers=headers).json()
    sunrise = my_json['forecasts'][0]['sunrise']
    sunset = my_json['forecasts'][0]['sunset']
    parts = my_json['forecasts'][0]['parts']
    city = my_json['geo_object']['province']['name']

    now = my_json['fact']
    temp = str(now['temp'])+'¬∞C'
    feels = str(now['feels_like'])+'¬∞C'
    wind_speed = str(now['wind_speed'])+' –º/—Å'
    humidity = str(now['humidity'])+'%'
    pressure_mm = str(now['pressure_mm'])+' –º–º —Ä—Ç. —Å—Ç.'
    morning = str(parts['morning']['temp_avg'])+'¬∞C'
    day = str(parts['day']['temp_avg'])+'¬∞C'
    evening = str(parts['evening']['temp_avg'])+'¬∞C'
    description = translate(now['condition'])
    formatting_parts = '\n–£—Ç—Ä–æ: '+morning+'\n–î–µ–Ω—å: '+day+'\n–í–µ—á–µ—Ä: '+evening
    formatting_set = '\n–í–æ—Å—Ö–æ–¥: '+sunrise+'\n–ó–∞–∫–∞—Ç: ' +sunset
    out = city+'\n'+description+'\n–°–µ–π—á–∞—Å: '+temp+'\n–ü–æ –æ—â—É—â–µ–Ω–∏—è–º: '+feels+'\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: '+wind_speed+'\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: '+humidity+'\n–î–∞–≤–ª–µ–Ω–∏–µ: '+pressure_mm+'\n'+formatting_parts+'\n'+formatting_set

    return out

#–°—á–µ—Ç—á–∏–∫ –¥–Ω–µ–π –¥–æ –∫–æ–Ω—Ü–∞ –∑–∏–º–Ω–∏—Ö –∫–∞–Ω–∏–∫—É–ª
a = '2017-02-09'.split('-')
aa = datetime.date(int(a[0]),int(a[1]),int(a[2]))

#–°—á–µ—Ç—á–∏–∫ –¥–Ω–µ–π —É—á–µ–±—ã –¥–ª—è I –∫—É—Ä—Å–∞
afix = '2016-08-30'.split('-')
aafix = datetime.date(int(afix[0]),int(afix[1]),int(afix[2]))

while True:

    #–†–∞–±–æ—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º/–¥–∞—Ç–æ–π
    now_date = datetime.date.today()
    now_time = datetime.datetime.now()
    day = now_date.isoweekday()
    cur_hour = now_time.hour
    cur_minute = now_time.minute
    cur_second = now_time.second
    for_logs = str(now_time.hour)+':'+str(now_time.minute)+':'+str(now_time.second)
    bb = datetime.date.today()

    #–°—á–µ—Ç—á–∏–∫ –¥–Ω–µ–π —É—á–µ–±—ã
    cc = aa-bb
    dd = int(str(cc).split()[0])
    #
    ccfix = bb-aafix
    ddfix = int(str(ccfix).split()[0])

    #–†–∞–±–æ—Ç–∞ —Å –ø–∞–¥–µ–∂–∞–º–∏ —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö
    days =  print_(numeral.choose_plural(int(dd), (u'–¥–µ–Ω—å', u'–¥–Ω—è', u'–¥–Ω–µ–π')))

    #–ù–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∏–∫–æ–≤
    chat_titles = {
    '1': '2–ü–ö–°-115 | –°–µ—Å—Å–∏—è',
    '2':'II –ö—É—Ä—Å | –°–µ—Å—Å–∏—è',
    '3':'I –ö—É—Ä—Å | '+str(ddfix)+' –¥–µ–Ω—å —É—á–µ–±—ã',
    }

    #–ß–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –±–µ—Å–µ–¥
    for i in range(len(conversations)):
        time.sleep(1)
        conf_id = conversations[str(i+1)]
        name_now = api.messages.getChat(chat_id=conf_id)
        check = name_now['title']

        #–ï—Å–ª–∏ –Ω–∞–¥–æ, —Ç–æ –º–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        if check != chat_titles[str(i+1)]:
            try:
                api.messages.editChat(chat_id=conf_id,title=chat_titles[str(i+1)])
                print('['+for_logs+'] –ò–∑–º–µ–Ω–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ—Å–µ–¥—ã ‚Ññ'+str(i+1)+' c "'+check+'" –Ω–∞ "'+chat_titles[str(i+1)]+'"')
            except:
                print('['+for_logs+'] (!) –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–º–µ–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±–µ—Å–µ–¥—ã ‚Ññ'+str(i+1))
    
    ok = api.messages.getLongPollHistory(ts=ts,pts=pts,preview_length=0)
    pts= ok['new_pts']

    #–ß–µ–∫–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if ok['messages'] != [0]:
        try:
            changed = ok['messages'][1]['body'].partition(' ')[2].partition(' ')[2]
        except:
            changed = '0'
        message = str(ok['messages'][1]['body'])
        owner_id = str(ok['messages'][1]['uid'])

        if check_dict(message) != 0:
            api.messages.send(chat_id=ok['messages'][1]['chat_id'],message=base[message])
            time.sleep(1)

        elif message =='/weather' or message =='/–ø–æ–≥–æ–¥–∞':
            mess = get_weather()
            api.messages.send(chat_id=ok['messages'][1]['chat_id'],message=mess)

        elif message == 'uptime' and owner_id == admin_id:
            up = os.popen('uptime').read()
            api.messages.send(chat_id=ok['messages'][1]['chat_id'],message=str(up))

        elif changed == '–æ–±–Ω–æ–≤–∏–ª–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–µ—Å–µ–¥—ã' or changed == '–æ–±–Ω–æ–≤–∏–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–µ—Å–µ–¥—ã' or changed == '—É–¥–∞–ª–∏–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–µ—Å–µ–¥—ã' or changed == '—É–¥–∞–ª–∏–ª–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–µ—Å–µ–¥—ã':
            api.messages.send(chat_id=ok['messages'][1]['chat_id'],message='–ù—É –∏ –∑–∞—á–µ–º?')
            try:
                photoresult = api.photos.getChatUploadServer(chat_id=ok['messages'][1]['chat_id'],crop_x=1,crop_y=1078,crop_width=1078)
                upload_url = photoresult['upload_url']
                img = {'photo': ('img.jpg', open(r''+photoconf[str(ok['messages'][1]['chat_id'])], 'rb'))}
                response = requests.post(upload_url, files=img).json()['response']
                time.sleep(2)
                api.messages.setChatPhoto(file=response)
            except:
                time.sleep(2)
    time.sleep(1)